//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SocialNetwork.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class records
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public records()
        {
            this.messages = new HashSet<messages>();
            this.objects_with_name_to_records = new HashSet<objects_with_name_to_records>();
            this.records1 = new HashSet<records>();
        }
    
        public int id { get; set; }
        public int object_id { get; set; }
        public int user_id_to { get; set; }
        public string text { get; set; }
        public int attached_record_id { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<messages> messages { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<objects_with_name_to_records> objects_with_name_to_records { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<records> records1 { get; set; }
        public virtual records records2 { get; set; }
        public virtual users users { get; set; }

        public int getCommentariesCount()
        {
            return MyFunctions.database.commentaries_to_objects_with_commentaries.Where(p => (p.object_id == this.object_id)).Count();
        }

        public int getRating()
        {
            int all_rating_to_object = 0;
            try // обработка исключения, когда у объекта нет ни одного рейтинга
            {
                all_rating_to_object = MyFunctions.database.ratings_to_objects_with_rating.Where(p => (p.object_id == this.id)).Sum(p => p.value);
            }
            catch { }
            return all_rating_to_object;
        }
    }
}
